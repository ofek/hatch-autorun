[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "hatch-autorun"
dynamic = ["version"]
description = "Hatch build hook plugin to inject code that will automatically run"
readme = "README.md"
requires-python = ">=3.7"
license = "MIT"
keywords = [
  "autorun",
  "build",
  "hatch",
  "plugin",
  "pth",
]
authors = [
  { name = "Ofek Lev", email = "oss@ofek.dev" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Framework :: Hatch",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.7",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Topic :: Software Development :: Build Tools",
]
dependencies = [
  "hatchling>=1.6.0",
]

[project.urls]
Funding = "https://github.com/sponsors/ofek"
History = "https://github.com/ofek/hatch-autorun/blob/master/HISTORY.md"
Issues = "https://github.com/ofek/hatch-autorun/issues"
Source = "https://github.com/ofek/hatch-autorun"

[project.entry-points.hatch]
autorun = "hatch_autorun.hooks"

[tool.hatch.version]
source = "vcs"

[tool.mypy]
disallow_untyped_defs = false
follow_imports = "normal"
ignore_missing_imports = true
pretty = true
show_column_numbers = true
warn_no_return = false
warn_unused_ignores = true

[tool.black]
target-version = ["py37"]
line-length = 120
skip-string-normalization = true

[tool.ruff]
target-version = "py37"
line-length = 120
select = [
  "A",
  "B",
  "C",
  "E",
  "F",
  "FBT",
  "I",
  "N",
  "Q",
  "RUF",
  "S",
  "T",
  "UP",
  "W",
  "YTT",
]
ignore = [
  # Allow non-abstract empty methods in abstract base classes
  "B027",
  # Ignore McCabe complexity
  "C901",
  # Allow boolean positional values in function calls, like `dict.get(... True)`
  "FBT003",
  # Ignore checks for possible passwords
  "S105", "S106", "S107",
]
unfixable = [
  # Don't touch unused imports
  "F401",
]

[tool.ruff.isort]
known-first-party = ["hatch_autorun"]

[tool.ruff.flake8-quotes]
inline-quotes = "single"

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
# Tests can use relative imports and assertions
"tests/**/*" = ["I252", "S101"]

[tool.coverage.run]
source_pkgs = ["hatch_autorun", "tests"]
branch = true
parallel = true
omit = [
  "src/hatch_autorun/__main__.py",
]

[tool.coverage.paths]
hatch_autorun = ["src/hatch_autorun", "*/hatch-autorun/src/hatch_autorun"]
tests = ["tests", "*/hatch-autorun/tests"]

[tool.coverage.report]
exclude_lines = [
  "no cov",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]
